// Code generated by MockGen. DO NOT EDIT.
// Source: httputil/httputil.go

// Package httputil_mock is a generated GoMock package.
package httputil_mock

import (
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	errors "github.com/rapidashorg/temp-shared-libraries/errors"
)

// MockHTTPUtil is a mock of HTTPUtil interface.
type MockHTTPUtil struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPUtilMockRecorder
}

// MockHTTPUtilMockRecorder is the mock recorder for MockHTTPUtil.
type MockHTTPUtilMockRecorder struct {
	mock *MockHTTPUtil
}

// NewMockHTTPUtil creates a new mock instance.
func NewMockHTTPUtil(ctrl *gomock.Controller) *MockHTTPUtil {
	mock := &MockHTTPUtil{ctrl: ctrl}
	mock.recorder = &MockHTTPUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPUtil) EXPECT() *MockHTTPUtilMockRecorder {
	return m.recorder
}

// GetQueryParam mocks base method.
func (m *MockHTTPUtil) GetQueryParam(r *http.Request, name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryParam", r, name)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetQueryParam indicates an expected call of GetQueryParam.
func (mr *MockHTTPUtilMockRecorder) GetQueryParam(r, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryParam", reflect.TypeOf((*MockHTTPUtil)(nil).GetQueryParam), r, name)
}

// GetURLParam mocks base method.
func (m *MockHTTPUtil) GetURLParam(r *http.Request, name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLParam", r, name)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURLParam indicates an expected call of GetURLParam.
func (mr *MockHTTPUtilMockRecorder) GetURLParam(r, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLParam", reflect.TypeOf((*MockHTTPUtil)(nil).GetURLParam), r, name)
}

// ReadBody mocks base method.
func (m *MockHTTPUtil) ReadBody(r *http.Request) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBody", r)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBody indicates an expected call of ReadBody.
func (mr *MockHTTPUtilMockRecorder) ReadBody(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBody", reflect.TypeOf((*MockHTTPUtil)(nil).ReadBody), r)
}

// WriteErrorResponse mocks base method.
func (m *MockHTTPUtil) WriteErrorResponse(w http.ResponseWriter, r *http.Request, err *errors.ErrorWrapper, startTime time.Time, errorContext string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteErrorResponse", w, r, err, startTime, errorContext)
}

// WriteErrorResponse indicates an expected call of WriteErrorResponse.
func (mr *MockHTTPUtilMockRecorder) WriteErrorResponse(w, r, err, startTime, errorContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteErrorResponse", reflect.TypeOf((*MockHTTPUtil)(nil).WriteErrorResponse), w, r, err, startTime, errorContext)
}

// WriteInternalServerError mocks base method.
func (m *MockHTTPUtil) WriteInternalServerError(w http.ResponseWriter, processTime float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteInternalServerError", w, processTime)
}

// WriteInternalServerError indicates an expected call of WriteInternalServerError.
func (mr *MockHTTPUtilMockRecorder) WriteInternalServerError(w, processTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteInternalServerError", reflect.TypeOf((*MockHTTPUtil)(nil).WriteInternalServerError), w, processTime)
}

// WriteResponse mocks base method.
func (m *MockHTTPUtil) WriteResponse(w http.ResponseWriter, r *http.Request, startTime time.Time, data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteResponse", w, r, startTime, data)
}

// WriteResponse indicates an expected call of WriteResponse.
func (mr *MockHTTPUtilMockRecorder) WriteResponse(w, r, startTime, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteResponse", reflect.TypeOf((*MockHTTPUtil)(nil).WriteResponse), w, r, startTime, data)
}
