// Code generated by MockGen. DO NOT EDIT.
// Source: env/init.go

// Package env_mock is a generated GoMock package.
package env_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEnv is a mock of Env interface.
type MockEnv struct {
	ctrl     *gomock.Controller
	recorder *MockEnvMockRecorder
}

// MockEnvMockRecorder is the mock recorder for MockEnv.
type MockEnvMockRecorder struct {
	mock *MockEnv
}

// NewMockEnv creates a new mock instance.
func NewMockEnv(ctrl *gomock.Controller) *MockEnv {
	mock := &MockEnv{ctrl: ctrl}
	mock.recorder = &MockEnvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnv) EXPECT() *MockEnvMockRecorder {
	return m.recorder
}

// Env mocks base method.
func (m *MockEnv) Env() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Env")
	ret0, _ := ret[0].(string)
	return ret0
}

// Env indicates an expected call of Env.
func (mr *MockEnvMockRecorder) Env() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Env", reflect.TypeOf((*MockEnv)(nil).Env))
}

// GoVersion mocks base method.
func (m *MockEnv) GoVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GoVersion indicates an expected call of GoVersion.
func (mr *MockEnvMockRecorder) GoVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoVersion", reflect.TypeOf((*MockEnv)(nil).GoVersion))
}

// HostIP mocks base method.
func (m *MockEnv) HostIP() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostIP")
	ret0, _ := ret[0].(string)
	return ret0
}

// HostIP indicates an expected call of HostIP.
func (mr *MockEnvMockRecorder) HostIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostIP", reflect.TypeOf((*MockEnv)(nil).HostIP))
}

// Hostname mocks base method.
func (m *MockEnv) Hostname() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hostname")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hostname indicates an expected call of Hostname.
func (mr *MockEnvMockRecorder) Hostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hostname", reflect.TypeOf((*MockEnv)(nil).Hostname))
}

// IsDevelopment mocks base method.
func (m *MockEnv) IsDevelopment() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDevelopment")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDevelopment indicates an expected call of IsDevelopment.
func (mr *MockEnvMockRecorder) IsDevelopment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDevelopment", reflect.TypeOf((*MockEnv)(nil).IsDevelopment))
}

// IsProduction mocks base method.
func (m *MockEnv) IsProduction() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProduction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProduction indicates an expected call of IsProduction.
func (mr *MockEnvMockRecorder) IsProduction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProduction", reflect.TypeOf((*MockEnv)(nil).IsProduction))
}

// IsStaging mocks base method.
func (m *MockEnv) IsStaging() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStaging")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStaging indicates an expected call of IsStaging.
func (mr *MockEnvMockRecorder) IsStaging() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStaging", reflect.TypeOf((*MockEnv)(nil).IsStaging))
}
